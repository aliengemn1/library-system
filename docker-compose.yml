version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: library-postgres
    environment:
      POSTGRES_DB: library_db
      POSTGRES_USER: library_user
      POSTGRES_PASSWORD: library_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U library_user -d library_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Discovery Server
  discovery-server:
    build:
      context: .
      dockerfile: discovery-server/Dockerfile
    container_name: library-discovery-server
    ports:
      - "18761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - library-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8761 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Configuration Server
  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    container_name: library-config-server
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - library-network
    depends_on:
      - discovery-server
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8888 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Catalog Service
  catalog-service:
    build:
      context: .
      dockerfile: catalog-service/Dockerfile
    container_name: library-catalog-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/library_db
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8082 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Patron Service
  patron-service:
    build:
      context: .
      dockerfile: patron-service/Dockerfile
    container_name: library-patron-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/library_db
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8083 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Circulation Service
  circulation-service:
    build:
      context: .
      dockerfile: circulation-service/Dockerfile
    container_name: library-circulation-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/library_db
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8084 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: library-notification-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/library_db
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8085 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Integration Service
  integration-service:
    build:
      context: .
      dockerfile: integration-service/Dockerfile
    container_name: library-integration-service
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/library_db
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8086 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reporting Service
  reporting-service:
    build:
      context: .
      dockerfile: reporting-service/Dockerfile
    container_name: library-reporting-service
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/library_db
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8087 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: library-api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
    networks:
      - library-network
    depends_on:
      - discovery-server
      - config-server
      - catalog-service
      - patron-service
      - circulation-service
      - notification-service
      - integration-service
      - reporting-service
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :8080 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - library-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - library-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - library-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.2
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - "5001:5000"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - library-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.2
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - library-network

volumes:
  postgres_data:

networks:
  library-network:
    driver: bridge 